
local ffi = require 'ffi'
local com = require 'extern.microsoftwindows.com'

ffi.cdef [[

	enum {
		D3D11_INPUT_PER_VERTEX_DATA	= 0,
		D3D11_INPUT_PER_INSTANCE_DATA	= 1,
		D3D11_FILL_WIREFRAME	= 2,
		D3D11_FILL_SOLID	= 3,
		D3D11_CULL_NONE	= 1,
		D3D11_CULL_FRONT	= 2,
		D3D11_CULL_BACK	= 3,
		D3D11_RESOURCE_DIMENSION_UNKNOWN	= 0,
		D3D11_RESOURCE_DIMENSION_BUFFER	= 1,
		D3D11_RESOURCE_DIMENSION_TEXTURE1D	= 2,
		D3D11_RESOURCE_DIMENSION_TEXTURE2D	= 3,
		D3D11_RESOURCE_DIMENSION_TEXTURE3D	= 4,
		D3D11_DSV_DIMENSION_UNKNOWN	= 0,
		D3D11_DSV_DIMENSION_TEXTURE1D	= 1,
		D3D11_DSV_DIMENSION_TEXTURE1DARRAY	= 2,
		D3D11_DSV_DIMENSION_TEXTURE2D	= 3,
		D3D11_DSV_DIMENSION_TEXTURE2DARRAY	= 4,
		D3D11_DSV_DIMENSION_TEXTURE2DMS	= 5,
		D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY	= 6,
		D3D11_RTV_DIMENSION_UNKNOWN	= 0,
		D3D11_RTV_DIMENSION_BUFFER	= 1,
		D3D11_RTV_DIMENSION_TEXTURE1D	= 2,
		D3D11_RTV_DIMENSION_TEXTURE1DARRAY	= 3,
		D3D11_RTV_DIMENSION_TEXTURE2D	= 4,
		D3D11_RTV_DIMENSION_TEXTURE2DARRAY	= 5,
		D3D11_RTV_DIMENSION_TEXTURE2DMS	= 6,
		D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY	= 7,
		D3D11_RTV_DIMENSION_TEXTURE3D	= 8,
		D3D11_UAV_DIMENSION_UNKNOWN	= 0,
		D3D11_UAV_DIMENSION_BUFFER	= 1,
		D3D11_UAV_DIMENSION_TEXTURE1D	= 2,
		D3D11_UAV_DIMENSION_TEXTURE1DARRAY	= 3,
		D3D11_UAV_DIMENSION_TEXTURE2D	= 4,
		D3D11_UAV_DIMENSION_TEXTURE2DARRAY	= 5,
		D3D11_UAV_DIMENSION_TEXTURE3D	= 8,
		D3D11_USAGE_DEFAULT	= 0,
		D3D11_USAGE_IMMUTABLE	= 1,
		D3D11_USAGE_DYNAMIC	= 2,
		D3D11_USAGE_STAGING	= 3,
		D3D11_BIND_VERTEX_BUFFER	= 0x1L,
		D3D11_BIND_INDEX_BUFFER	= 0x2L,
		D3D11_BIND_CONSTANT_BUFFER	= 0x4L,
		D3D11_BIND_SHADER_RESOURCE	= 0x8L,
		D3D11_BIND_STREAM_OUTPUT	= 0x10L,
		D3D11_BIND_RENDER_TARGET	= 0x20L,
		D3D11_BIND_DEPTH_STENCIL	= 0x40L,
		D3D11_BIND_UNORDERED_ACCESS	= 0x80L,
		D3D11_CPU_ACCESS_WRITE	= 0x10000L,
		D3D11_CPU_ACCESS_READ	= 0x20000L,
		D3D11_RESOURCE_MISC_GENERATE_MIPS	= 0x1L,
		D3D11_RESOURCE_MISC_SHARED	= 0x2L,
		D3D11_RESOURCE_MISC_TEXTURECUBE	= 0x4L,
		D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS	= 0x10L,
		D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS	= 0x20L,
		D3D11_RESOURCE_MISC_BUFFER_STRUCTURED	= 0x40L,
		D3D11_RESOURCE_MISC_RESOURCE_CLAMP	= 0x80L,
		D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX	= 0x100L,
		D3D11_RESOURCE_MISC_GDI_COMPATIBLE	= 0x200L
		D3D11_MAP_READ	= 1,
		D3D11_MAP_WRITE	= 2,
		D3D11_MAP_READ_WRITE	= 3,
		D3D11_MAP_WRITE_DISCARD	= 4,
		D3D11_MAP_WRITE_NO_OVERWRITE	= 5,
		D3D11_MAP_FLAG_DO_NOT_WAIT	= 0x100000L,
		D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR	= 0x1L,
		D3D11_CLEAR_DEPTH	= 0x1L,
		D3D11_CLEAR_STENCIL	= 0x2L,
		D3D11_COMPARISON_NEVER	= 1,
		D3D11_COMPARISON_LESS	= 2,
		D3D11_COMPARISON_EQUAL	= 3,
		D3D11_COMPARISON_LESS_EQUAL	= 4,
		D3D11_COMPARISON_GREATER	= 5,
		D3D11_COMPARISON_NOT_EQUAL	= 6,
		D3D11_COMPARISON_GREATER_EQUAL	= 7,
		D3D11_COMPARISON_ALWAYS	= 8,
		D3D11_DEPTH_WRITE_MASK_ZERO	= 0,
		D3D11_DEPTH_WRITE_MASK_ALL	= 1,
		D3D11_STENCIL_OP_KEEP	= 1,
		D3D11_STENCIL_OP_ZERO	= 2,
		D3D11_STENCIL_OP_REPLACE	= 3,
		D3D11_STENCIL_OP_INCR_SAT	= 4,
		D3D11_STENCIL_OP_DECR_SAT	= 5,
		D3D11_STENCIL_OP_INVERT	= 6,
		D3D11_STENCIL_OP_INCR	= 7,
		D3D11_STENCIL_OP_DECR	= 8,
		D3D11_BLEND_ZERO	= 1,
		D3D11_BLEND_ONE	= 2,
		D3D11_BLEND_SRC_COLOR	= 3,
		D3D11_BLEND_INV_SRC_COLOR	= 4,
		D3D11_BLEND_SRC_ALPHA	= 5,
		D3D11_BLEND_INV_SRC_ALPHA	= 6,
		D3D11_BLEND_DEST_ALPHA	= 7,
		D3D11_BLEND_INV_DEST_ALPHA	= 8,
		D3D11_BLEND_DEST_COLOR	= 9,
		D3D11_BLEND_INV_DEST_COLOR	= 10,
		D3D11_BLEND_SRC_ALPHA_SAT	= 11,
		D3D11_BLEND_BLEND_FACTOR	= 14,
		D3D11_BLEND_INV_BLEND_FACTOR	= 15,
		D3D11_BLEND_SRC1_COLOR	= 16,
		D3D11_BLEND_INV_SRC1_COLOR	= 17,
		D3D11_BLEND_SRC1_ALPHA	= 18,
		D3D11_BLEND_INV_SRC1_ALPHA	= 19
		D3D11_BLEND_OP_ADD	= 1,
		D3D11_BLEND_OP_SUBTRACT	= 2,
		D3D11_BLEND_OP_REV_SUBTRACT	= 3,
		D3D11_BLEND_OP_MIN	= 4,
		D3D11_BLEND_OP_MAX	= 5
		D3D11_COLOR_WRITE_ENABLE_RED	= 1,
		D3D11_COLOR_WRITE_ENABLE_GREEN	= 2,
		D3D11_COLOR_WRITE_ENABLE_BLUE	= 4,
		D3D11_COLOR_WRITE_ENABLE_ALPHA	= 8,
		D3D11_COLOR_WRITE_ENABLE_ALL	= ( ( ( D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN )  | D3D11_COLOR_WRITE_ENABLE_BLUE )  | D3D11_COLOR_WRITE_ENABLE_ALPHA ),
		D3D11_FEATURE_THREADING	= 0,
		D3D11_FEATURE_DOUBLES	= 1,
		D3D11_FEATURE_FORMAT_SUPPORT	= 2,
		D3D11_FEATURE_FORMAT_SUPPORT2	= 3,
		D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS	= 4,
		D3D11_CREATE_DEVICE_SINGLETHREADED	= 0x1,
		D3D11_CREATE_DEVICE_DEBUG	= 0x2,
		D3D11_CREATE_DEVICE_SWITCH_TO_REF	= 0x4,
		D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS	= 0x8,
		D3D11_CREATE_DEVICE_BGRA_SUPPORT	= 0x20,
		D3D11_TEXTURECUBE_FACE_POSITIVE_X	= 0,
		D3D11_TEXTURECUBE_FACE_NEGATIVE_X	= 1,
		D3D11_TEXTURECUBE_FACE_POSITIVE_Y	= 2,
		D3D11_TEXTURECUBE_FACE_NEGATIVE_Y	= 3,
		D3D11_TEXTURECUBE_FACE_POSITIVE_Z	= 4,
		D3D11_TEXTURECUBE_FACE_NEGATIVE_Z	= 5,
		D3D11_BUFFEREX_SRV_FLAG_RAW	= 0x1,
		D3D11_DSV_READ_ONLY_DEPTH	= 0x1L,
		D3D11_DSV_READ_ONLY_STENCIL	= 0x2L,
		D3D11_BUFFER_UAV_FLAG_RAW	= 0x1,
		D3D11_BUFFER_UAV_FLAG_APPEND	= 0x2,
		D3D11_BUFFER_UAV_FLAG_COUNTER	= 0x4,
		D3D11_FILTER_MIN_MAG_MIP_POINT	= 0,
		D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR	= 0x1,
		D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x4,
		D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR	= 0x5,
		D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT	= 0x10,
		D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x11,
		D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT	= 0x14,
		D3D11_FILTER_MIN_MAG_MIP_LINEAR	= 0x15,
		D3D11_FILTER_ANISOTROPIC	= 0x55,
		D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT	= 0x80,
		D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= 0x81,
		D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= 0x84,
		D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= 0x85,
		D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= 0x90,
		D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= 0x91,
		D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= 0x94,
		D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	= 0x95,
		D3D11_FILTER_COMPARISON_ANISOTROPIC	= 0xd5,
		D3D11_FILTER_TYPE_POINT	= 0,
		D3D11_FILTER_TYPE_LINEAR = 1,
		D3D11_TEXTURE_ADDRESS_WRAP	= 1,
		D3D11_TEXTURE_ADDRESS_MIRROR	= 2,
		D3D11_TEXTURE_ADDRESS_CLAMP	= 3,
		D3D11_TEXTURE_ADDRESS_BORDER	= 4,
		D3D11_TEXTURE_ADDRESS_MIRROR_ONCE	= 5,
		D3D11_FORMAT_SUPPORT_BUFFER	= 0x1,
		D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER	= 0x2,
		D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER	= 0x4,
		D3D11_FORMAT_SUPPORT_SO_BUFFER	= 0x8,
		D3D11_FORMAT_SUPPORT_TEXTURE1D	= 0x10,
		D3D11_FORMAT_SUPPORT_TEXTURE2D	= 0x20,
		D3D11_FORMAT_SUPPORT_TEXTURE3D	= 0x40,
		D3D11_FORMAT_SUPPORT_TEXTURECUBE	= 0x80,
		D3D11_FORMAT_SUPPORT_SHADER_LOAD	= 0x100,
		D3D11_FORMAT_SUPPORT_SHADER_SAMPLE	= 0x200,
		D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON	= 0x400,
		D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT	= 0x800,
		D3D11_FORMAT_SUPPORT_MIP	= 0x1000,
		D3D11_FORMAT_SUPPORT_MIP_AUTOGEN	= 0x2000,
		D3D11_FORMAT_SUPPORT_RENDER_TARGET	= 0x4000,
		D3D11_FORMAT_SUPPORT_BLENDABLE	= 0x8000,
		D3D11_FORMAT_SUPPORT_DEPTH_STENCIL	= 0x10000,
		D3D11_FORMAT_SUPPORT_CPU_LOCKABLE	= 0x20000,
		D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE	= 0x40000,
		D3D11_FORMAT_SUPPORT_DISPLAY	= 0x80000,
		D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT	= 0x100000,
		D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET	= 0x200000,
		D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD	= 0x400000,
		D3D11_FORMAT_SUPPORT_SHADER_GATHER	= 0x800000,
		D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST	= 0x1000000,
		D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW	= 0x2000000,
		D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON	= 0x4000000,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD	= 0x1,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS	= 0x2,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE	= 0x4,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE	= 0x8,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX	= 0x10,
		D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX	= 0x20,
		D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD	= 0x40,
		D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE	= 0x80,
		D3D11_ASYNC_GETDATA_DONOTFLUSH	= 0x1,
		D3D11_QUERY_EVENT	= 0,
		D3D11_QUERY_OCCLUSION	= ( D3D11_QUERY_EVENT + 1 ) ,
		D3D11_QUERY_TIMESTAMP	= ( D3D11_QUERY_OCCLUSION + 1 ) ,
		D3D11_QUERY_TIMESTAMP_DISJOINT	= ( D3D11_QUERY_TIMESTAMP + 1 ) ,
		D3D11_QUERY_PIPELINE_STATISTICS	= ( D3D11_QUERY_TIMESTAMP_DISJOINT + 1 ) ,
		D3D11_QUERY_OCCLUSION_PREDICATE	= ( D3D11_QUERY_PIPELINE_STATISTICS + 1 ) ,
		D3D11_QUERY_SO_STATISTICS	= ( D3D11_QUERY_OCCLUSION_PREDICATE + 1 ) ,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE	= ( D3D11_QUERY_SO_STATISTICS + 1 ) ,
		D3D11_QUERY_SO_STATISTICS_STREAM0	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE + 1 ) ,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0	= ( D3D11_QUERY_SO_STATISTICS_STREAM0 + 1 ) ,
		D3D11_QUERY_SO_STATISTICS_STREAM1	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 + 1 ) ,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1	= ( D3D11_QUERY_SO_STATISTICS_STREAM1 + 1 ) ,
		D3D11_QUERY_SO_STATISTICS_STREAM2	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 + 1 ) ,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2	= ( D3D11_QUERY_SO_STATISTICS_STREAM2 + 1 ) ,
		D3D11_QUERY_SO_STATISTICS_STREAM3	= ( D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 + 1 ) ,
		D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3	= ( D3D11_QUERY_SO_STATISTICS_STREAM3 + 1 )
		D3D11_QUERY_MISC_PREDICATEHINT	= 0x1,
		D3D11_COUNTER_DEVICE_DEPENDENT_0	= 0x40000000
		D3D11_COUNTER_TYPE_FLOAT32	= 0,
		D3D11_COUNTER_TYPE_UINT16	= ( D3D11_COUNTER_TYPE_FLOAT32 + 1 ) ,
		D3D11_COUNTER_TYPE_UINT32	= ( D3D11_COUNTER_TYPE_UINT16 + 1 ) ,
		D3D11_COUNTER_TYPE_UINT64	= ( D3D11_COUNTER_TYPE_UINT32 + 1 ),
		D3D11_STANDARD_MULTISAMPLE_PATTERN	= 0xffffffff,
		D3D11_CENTER_MULTISAMPLE_PATTERN	= 0xfffffffe,
		D3D11_DEVICE_CONTEXT_IMMEDIATE	= 0,
		D3D11_DEVICE_CONTEXT_DEFERRED	= ( D3D11_DEVICE_CONTEXT_IMMEDIATE + 1 ),
		/*
#define	D3D11_16BIT_INDEX_STRIP_CUT_VALUE	( 0xffff )
#define	D3D11_32BIT_INDEX_STRIP_CUT_VALUE	( 0xffffffff )
#define	D3D11_8BIT_INDEX_STRIP_CUT_VALUE	( 0xff )
#define	D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT	( 9 )
#define	D3D11_CLIP_OR_CULL_DISTANCE_COUNT	( 8 )
#define	D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT	( 2 )
#define	D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT	( 14 )
#define	D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS	( 4 )
#define	D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT	( 15 )
#define	D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS	( 4 )
#define	D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT	( 15 )
#define	D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST	( 1 )
#define	D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS	( 1 )
#define	D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT	( 64 )
#define	D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS	( 4 )
#define	D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT	( 1 )
#define	D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST	( 1 )
#define	D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS	( 1 )
#define	D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS	( 1 )
#define	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT	( 128 )
#define	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST	( 1 )
#define	D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS	( 1 )
#define	D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT	( 128 )
#define	D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS	( 1 )
#define	D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT	( 16 )
#define	D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST	( 1 )
#define	D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS	( 1 )
#define	D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT	( 16 )
#define	D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT	( 32 )
#define	D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS	( 4 )
#define	D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_COMMONSHADER_TEMP_REGISTER_COUNT	( 4096 )
#define	D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST	( 3 )
#define	D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS	( 3 )
#define	D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX	( 10 )
#define	D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN	( -10 )
#define	D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE	( -8 )
#define	D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE	( 7 )
#define	D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 256 )
#define	D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP	( 64 )
#define	D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 240 )
#define	D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP	( 68 )
#define	D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 224 )
#define	D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP	( 72 )
#define	D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 208 )
#define	D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP	( 76 )
#define	D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 192 )
#define	D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP	( 84 )
#define	D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 176 )
#define	D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP	( 92 )
#define	D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 160 )
#define	D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP	( 100 )
#define	D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 144 )
#define	D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP	( 112 )
#define	D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 128 )
#define	D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP	( 128 )
#define	D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 112 )
#define	D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP	( 144 )
#define	D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 96 )
#define	D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP	( 168 )
#define	D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 80 )
#define	D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP	( 204 )
#define	D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 64 )
#define	D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP	( 256 )
#define	D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 48 )
#define	D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP	( 340 )
#define	D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 32 )
#define	D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP	( 512 )
#define	D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD	( 16 )
#define	D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP	( 768 )
#define	D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION	( 1 )
#define	D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT	( 256 )
#define	D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP	( 768 )
#define	D3D11_CS_4_X_THREAD_GROUP_MAX_X	( 768 )
#define	D3D11_CS_4_X_THREAD_GROUP_MAX_Y	( 768 )
#define	D3D11_CS_4_X_UAV_REGISTER_COUNT	( 1 )
#define	D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION	( 65535 )
#define	D3D11_CS_TGSM_REGISTER_COUNT	( 8192 )
#define	D3D11_CS_TGSM_REGISTER_READS_PER_INST	( 1 )
#define	D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS	( 1 )
#define	D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS	( 1 )
#define	D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP	( 1024 )
#define	D3D11_CS_THREAD_GROUP_MAX_X	( 1024 )
#define	D3D11_CS_THREAD_GROUP_MAX_Y	( 1024 )
#define	D3D11_CS_THREAD_GROUP_MAX_Z	( 64 )
#define	D3D11_CS_THREAD_GROUP_MIN_X	( 1 )
#define	D3D11_CS_THREAD_GROUP_MIN_Y	( 1 )
#define	D3D11_CS_THREAD_GROUP_MIN_Z	( 1 )
#define	D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL	( 16384 )
#define D3D11_DEFAULT_BLEND_FACTOR_ALPHA	( 1.0f )
#define D3D11_DEFAULT_BLEND_FACTOR_BLUE	( 1.0f )
#define D3D11_DEFAULT_BLEND_FACTOR_GREEN	( 1.0f )
#define D3D11_DEFAULT_BLEND_FACTOR_RED	( 1.0f )
#define D3D11_DEFAULT_BORDER_COLOR_COMPONENT	( 0.0f )
#define	D3D11_DEFAULT_DEPTH_BIAS	( 0 )
#define D3D11_DEFAULT_DEPTH_BIAS_CLAMP	( 0.0f )
#define D3D11_DEFAULT_MAX_ANISOTROPY	( 16 )
#define D3D11_DEFAULT_MIP_LOD_BIAS	( 0.0f )
#define	D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX	( 0 )
#define	D3D11_DEFAULT_SAMPLE_MASK	( 0xffffffff )
#define	D3D11_DEFAULT_SCISSOR_ENDX	( 0 )
#define	D3D11_DEFAULT_SCISSOR_ENDY	( 0 )
#define	D3D11_DEFAULT_SCISSOR_STARTX	( 0 )
#define	D3D11_DEFAULT_SCISSOR_STARTY	( 0 )
#define D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS	( 0.0f )
#define	D3D11_DEFAULT_STENCIL_READ_MASK	( 0xff )
#define	D3D11_DEFAULT_STENCIL_REFERENCE	( 0 )
#define	D3D11_DEFAULT_STENCIL_WRITE_MASK	( 0xff )
#define	D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX	( 0 )
#define	D3D11_DEFAULT_VIEWPORT_HEIGHT	( 0 )
#define D3D11_DEFAULT_VIEWPORT_MAX_DEPTH	( 0.0f )
#define D3D11_DEFAULT_VIEWPORT_MIN_DEPTH	( 0.0f )
#define	D3D11_DEFAULT_VIEWPORT_TOPLEFTX	( 0 )
#define	D3D11_DEFAULT_VIEWPORT_TOPLEFTY	( 0 )
#define	D3D11_DEFAULT_VIEWPORT_WIDTH	( 0 )
#define	D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS	( 3968 )
#define	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT	( 32 )
#define	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS	( 1 )
#define	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS	( 3 )
#define	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT	( 1 )
#define	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS	( 1 )
#define	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT	( 32 )
#define	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS	( 1 )
#define	D3D11_DS_OUTPUT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_DS_OUTPUT_REGISTER_COUNT	( 32 )
#define D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP	( 0.6 )
#define D3D11_FLOAT32_MAX	( 3.402823466e+38f )
#define D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP	( 0.6f )
#define D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR	( 2.4f )
#define D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR	( 1.0f )
#define D3D11_FLOAT_TO_SRGB_OFFSET	( 0.055f )
#define D3D11_FLOAT_TO_SRGB_SCALE_1	( 12.92f )
#define D3D11_FLOAT_TO_SRGB_SCALE_2	( 1.055f )
#define D3D11_FLOAT_TO_SRGB_THRESHOLD	( 0.0031308f )
#define D3D11_FTOI_INSTRUCTION_MAX_INPUT	( 2147483647.999f )
#define D3D11_FTOI_INSTRUCTION_MIN_INPUT	( -2147483648.999f )
#define D3D11_FTOU_INSTRUCTION_MAX_INPUT	( 4294967295.999f )
#define D3D11_FTOU_INSTRUCTION_MIN_INPUT	( 0.0f )
#define	D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST	( 2 )
#define	D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS	( 1 )
#define	D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS	( 1 )
#define	D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT	( 1 )
#define	D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS	( 1 )
#define	D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT	( 1 )
#define	D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS	( 1 )
#define	D3D11_GS_INPUT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_GS_INPUT_REGISTER_COUNT	( 32 )
#define	D3D11_GS_INPUT_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_GS_INPUT_REGISTER_READ_PORTS	( 1 )
#define	D3D11_GS_INPUT_REGISTER_VERTICES	( 32 )
#define	D3D11_GS_MAX_INSTANCE_COUNT	( 32 )
#define	D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES	( 1024 )
#define	D3D11_GS_OUTPUT_ELEMENTS	( 32 )
#define	D3D11_GS_OUTPUT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_GS_OUTPUT_REGISTER_COUNT	( 32 )
#define	D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT	( 32 )
#define	D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT	( 32 )
#define	D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS	( 1 )
#define	D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND	( 0xffffffff )
#define	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS	( 1 )
#define	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT	( 1 )
#define	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS	( 1 )
#define	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS	( 1 )
#define	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT	( 1 )
#define	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS	( 1 )
#define	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS	( 1 )
#define	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT	( 1 )
#define	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS	( 1 )
#define	D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND	( 0xffffffff )
#define D3D11_HS_MAXTESSFACTOR_LOWER_BOUND	( 1.0f )
#define D3D11_HS_MAXTESSFACTOR_UPPER_BOUND	( 64.0f )
#define	D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS	( 3968 )
#define	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS	( 1 )
#define	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT	( 1 )
#define	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS	( 1 )
#define	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT	( 32 )
#define	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS	( 1 )
#define	D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES	( 0 )
#define	D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY	( 0 )
#define	D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES	( 0 )
#define	D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT	( 1 )
#define	D3D11_IA_INSTANCE_ID_BIT_COUNT	( 32 )
#define	D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT	( 32 )
#define	D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT	( 32 )
#define	D3D11_IA_PRIMITIVE_ID_BIT_COUNT	( 32 )
#define	D3D11_IA_VERTEX_ID_BIT_COUNT	( 32 )
#define	D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT	( 32 )
#define	D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS	( 128 )
#define	D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT	( 32 )
#define	D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT	( 0xffffffff )
#define	D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER	( 0xffffffff )
#define	D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL	( 0xffffffff )
#define	D3D11_KEEP_UNORDERED_ACCESS_VIEWS	( 0xffffffff )
#define D3D11_LINEAR_GAMMA	( 1.0f )
#define	D3D11_MAJOR_VERSION	( 11 )
#define D3D11_MAX_BORDER_COLOR_COMPONENT	( 1.0f )
#define D3D11_MAX_DEPTH	( 1.0f )
#define	D3D11_MAX_MAXANISOTROPY	( 16 )
#define	D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT	( 32 )
#define D3D11_MAX_POSITION_VALUE	( 3.402823466e+34f )
#define	D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP	( 17 )
#define	D3D11_MINOR_VERSION	( 0 )
#define D3D11_MIN_BORDER_COLOR_COMPONENT	( 0.0f )
#define D3D11_MIN_DEPTH	( 0.0f )
#define	D3D11_MIN_MAXANISOTROPY	( 0 )
#define D3D11_MIP_LOD_BIAS_MAX	( 15.99f )
#define D3D11_MIP_LOD_BIAS_MIN	( -16.0f )
#define	D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT	( 8 )
#define	D3D11_MIP_LOD_RANGE_BIT_COUNT	( 8 )
#define D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH	( 1.4f )
#define	D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT	( 0 )
#define	D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT	( 15 )
#define	D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT	( 16 )
#define	D3D11_PS_CS_UAV_REGISTER_COMPONENTS	( 1 )
#define	D3D11_PS_CS_UAV_REGISTER_COUNT	( 8 )
#define	D3D11_PS_CS_UAV_REGISTER_READS_PER_INST	( 1 )
#define	D3D11_PS_CS_UAV_REGISTER_READ_PORTS	( 1 )
#define	D3D11_PS_FRONTFACING_DEFAULT_VALUE	( 0xffffffff )
#define	D3D11_PS_FRONTFACING_FALSE_VALUE	( 0 )
#define	D3D11_PS_FRONTFACING_TRUE_VALUE	( 0xffffffff )
#define	D3D11_PS_INPUT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_PS_INPUT_REGISTER_COUNT	( 32 )
#define	D3D11_PS_INPUT_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_PS_INPUT_REGISTER_READ_PORTS	( 1 )
#define D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT	( 0.0f )
#define	D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS	( 1 )
#define	D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT	( 1 )
#define	D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS	( 1 )
#define	D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_PS_OUTPUT_MASK_REGISTER_COUNT	( 1 )
#define	D3D11_PS_OUTPUT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_PS_OUTPUT_REGISTER_COUNT	( 8 )
#define D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT	( 0.5f )
#define	D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT	( 16 )
#define	D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE	( 4096 )
#define	D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP	( 27 )
#define	D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT	( 4096 )
#define	D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE	( 4096 )
#define	D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP	( 32 )
#define	D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP	( 32 )
#define	D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION	( 16384 )
#define	D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT	( 1024 )
#define	D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT	( 4096 )
#define	D3D11_REQ_MAXANISOTROPY	( 16 )
#define	D3D11_REQ_MIP_LEVELS	( 15 )
#define	D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES	( 2048 )
#define	D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE	( 4096 )
#define	D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH	( 16384 )
#define	D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM	( 128 )
#define D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM	( 0.25f )
#define	D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP	( 20 )
#define	D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE	( 4096 )
#define	D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION	( 2048 )
#define	D3D11_REQ_TEXTURE1D_U_DIMENSION	( 16384 )
#define	D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION	( 2048 )
#define	D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION	( 16384 )
#define	D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION	( 2048 )
#define	D3D11_REQ_TEXTURECUBE_DIMENSION	( 16384 )
#define	D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL	( 0 )
#define	D3D11_SHADER_MAJOR_VERSION	( 5 )
#define	D3D11_SHADER_MAX_INSTANCES	( 65535 )
#define	D3D11_SHADER_MAX_INTERFACES	( 253 )
#define	D3D11_SHADER_MAX_INTERFACE_CALL_SITES	( 4096 )
#define	D3D11_SHADER_MAX_TYPES	( 65535 )
#define	D3D11_SHADER_MINOR_VERSION	( 0 )
#define	D3D11_SHIFT_INSTRUCTION_PAD_VALUE	( 0 )
#define	D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT	( 5 )
#define	D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT	( 8 )
#define	D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES	( 2048 )
#define	D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES	( 512 )
#define	D3D11_SO_BUFFER_SLOT_COUNT	( 4 )
#define	D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP	( 0xffffffff )
#define	D3D11_SO_NO_RASTERIZED_STREAM	( 0xffffffff )
#define	D3D11_SO_OUTPUT_COMPONENT_COUNT	( 128 )
#define	D3D11_SO_STREAM_COUNT	( 4 )
#define	D3D11_SPEC_DATE_DAY	( 04 )
#define	D3D11_SPEC_DATE_MONTH	( 06 )
#define	D3D11_SPEC_DATE_YEAR	( 2009 )
#define D3D11_SPEC_VERSION	( 1.0 )
#define D3D11_SRGB_GAMMA	( 2.2f )
#define D3D11_SRGB_TO_FLOAT_DENOMINATOR_1	( 12.92f )
#define D3D11_SRGB_TO_FLOAT_DENOMINATOR_2	( 1.055f )
#define D3D11_SRGB_TO_FLOAT_EXPONENT	( 2.4f )
#define D3D11_SRGB_TO_FLOAT_OFFSET	( 0.055f )
#define D3D11_SRGB_TO_FLOAT_THRESHOLD	( 0.04045f )
#define D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP	( 0.5f )
#define	D3D11_STANDARD_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED	( 64 )
#define	D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE	( 4 )
#define	D3D11_STANDARD_PIXEL_COMPONENT_COUNT	( 128 )
#define	D3D11_STANDARD_PIXEL_ELEMENT_COUNT	( 32 )
#define	D3D11_STANDARD_VECTOR_SIZE	( 4 )
#define	D3D11_STANDARD_VERTEX_ELEMENT_COUNT	( 32 )
#define	D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT	( 64 )
#define	D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT	( 8 )
#define	D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT	( 8 )
#define	D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR	( 64 )
#define	D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR	( 64 )
#define	D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR	( 63 )
#define	D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR	( 64 )
#define	D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR	( 2 )
#define	D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR	( 1 )
#define	D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR	( 1 )
#define	D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT	( 16 )
#define	D3D11_UNBOUND_MEMORY_ACCESS_RESULT	( 0 )
#define	D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX	( 15 )
#define	D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE	( 16 )
#define	D3D11_VIEWPORT_BOUNDS_MAX	( 32767 )
#define	D3D11_VIEWPORT_BOUNDS_MIN	( -32768 )
#define	D3D11_VS_INPUT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_VS_INPUT_REGISTER_COUNT	( 32 )
#define	D3D11_VS_INPUT_REGISTER_READS_PER_INST	( 2 )
#define	D3D11_VS_INPUT_REGISTER_READ_PORTS	( 1 )
#define	D3D11_VS_OUTPUT_REGISTER_COMPONENTS	( 4 )
#define	D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT	( 32 )
#define	D3D11_VS_OUTPUT_REGISTER_COUNT	( 32 )
#define	D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT	( 10 )
#define	D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP	( 25 )
#define	D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP	( 25 )
#define	_FACD3D11	( 0x87c )
#define	_FACD3D11DEBUG	( ( _FACD3D11 + 1 )  )
#define MAKE_D3D11_HRESULT( code )  MAKE_HRESULT( 1, _FACD3D11, code )
#define MAKE_D3D11_STATUS( code )    MAKE_HRESULT( 0, _FACD3D11, code )
#define D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS  MAKE_D3D11_HRESULT(1)
#define D3D11_ERROR_FILE_NOT_FOUND  MAKE_D3D11_HRESULT(2)
#define D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS  MAKE_D3D11_HRESULT(3)
#define D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD  MAKE_D3D11_HRESULT(4)
#define	D3D11_APPEND_ALIGNED_ELEMENT	( 0xffffffff )
#define	D3D11_FILTER_TYPE_MASK	( 0x3 )
#define	D3D11_MIN_FILTER_SHIFT	( 4 )
#define	D3D11_MAG_FILTER_SHIFT	( 2 )
#define	D3D11_MIP_FILTER_SHIFT	( 0 )
#define	D3D11_COMPARISON_FILTERING_BIT	( 0x80 )
#define	D3D11_ANISOTROPIC_FILTERING_BIT	( 0x40 )
		*/
	};
	
	typedef struct D3D11_INPUT_ELEMENT_DESC {
		char* SemanticName;
		uint32_t SemanticIndex;
		DXGI_FORMAT Format;
		uint32_t InputSlot;
		uint32_t AlignedByteOffset;
		D3D11enum InputSlotClass;
		uint32_t InstanceDataStepRate;
	} D3D11_INPUT_ELEMENT_DESC;
	
	typedef struct D3D11_SO_DECLARATION_ENTRY {
		uint32_t Stream;
		char* SemanticName;
		uint32_t SemanticIndex;
		uint8_t StartComponent, ComponentCount, OutputSlot;
	} D3D11_SO_DECLARATION_ENTRY;
	
	typedef struct D3D11_VIEWPORT {
		float TopLeftX, TopLeftY, Width, Height, MinDepth, MaxDepth;
	} D3D11_VIEWPORT;

	typedef struct D3D11_BOX {
		uint32_t left, top, front, right, bottom, back;
	} D3D11_BOX;
		
	typedef struct D3D11_DEPTH_STENCILOP_DESC {
		D3D11enum StencilFailOp, StencilDepthFailOp, StencilPassOp, StencilFunc;
	} D3D11_DEPTH_STENCILOP_DESC;
	
	typedef struct D3D11_DEPTH_STENCIL_DESC {
		bool32 DepthEnable;
		D3D11enum DepthWriteMask, DepthFunc;
		bool32 StencilEnable;
		uint8_t StencilReadMask, StencilWriteMask;
		D3D11_DEPTH_STENCILOP_DESC FrontFace, BackFace;
	} D3D11_DEPTH_STENCIL_DESC;
		
	typedef struct D3D11_RENDER_TARGET_BLEND_DESC {
		bool32 BlendEnable;
		D3D11enum SrcBlend, DestBlend, BlendOp, SrcBlendAlpha, DestBlendAlpha, BlendOpAlpha;
		uint8_t RenderTargetWriteMask;
	} D3D11_RENDER_TARGET_BLEND_DESC;
	
	typedef struct D3D11_BLEND_DESC {
		bool32 AlphaToCoverageEnable, IndependentBlendEnable;
		D3D11_RENDER_TARGET_BLEND_DESC RenderTarget[8];
	} D3D11_BLEND_DESC;
	
	typedef struct D3D11_RASTERIZER_DESC {
		D3D11enum FillMode, CullMode;
		bool32 FrontCounterClockwise;
		int32_t DepthBias;
		float DepthBiasClamp, SlopeScaledDepthBias;
		bool32 DepthClipEnable, ScissorEnable, MultisampleEnable, AntialiasedLineEnable;
	} D3D11_RASTERIZER_DESC;
	
	typedef struct D3D11_SUBRESOURCE_DATA {
		const void* pSysMem;
		uint32_t SysMemPitch, SysMemSlicePitch;
	} D3D11_SUBRESOURCE_DATA;
	
	typedef struct D3D11_MAPPED_SUBRESOURCE {
		void *pData;
		uint32_t RowPitch, DepthPitch;
	} D3D11_MAPPED_SUBRESOURCE;
	
	typedef struct D3D11_BUFFER_DESC {
		uint32_t ByteWidth;
		D3D11enum Usage;
		uint32_t BindFlags, CPUAccessFlags, MiscFlags, StructureByteStride;
	} D3D11_BUFFER_DESC;
	
	typedef struct D3D11_TEXTURE1D_DESC {
		uint32_t Width, MipLevels, ArraySize;
		DXGI_FORMAT Format;
		D3D11enum Usage;
		uint32_t BindFlags, CPUAccessFlags, MiscFlags;
	} D3D11_TEXTURE1D_DESC;

	typedef struct D3D11_TEXTURE2D_DESC {
		uint32_t Width, Height, MipLevels, ArraySize;
		DXGI_FORMAT Format;
		DXGI_SAMPLE_DESC SampleDesc;
		D3D11enum Usage;
		uint32_t BindFlags, CPUAccessFlags, MiscFlags;
	} D3D11_TEXTURE2D_DESC;
	
	typedef struct D3D11_TEXTURE3D_DESC {
		uint32_t Width, Height, Depth, MipLevels;
		DXGI_FORMAT Format;
		D3D11enum Usage;
		uint32_t BindFlags, CPUAccessFlags, MiscFlags;
	} D3D11_TEXTURE3D_DESC;
	
	typedef struct D3D11_SHADER_RESOURCE_VIEW_DESC {
		DXGI_FORMAT Format;
		D3D11_SRV_DIMENSION ViewDimension;
		union {
			struct {
				union {
					uint32_t FirstElement;
					uint32_t ElementOffset;
				};
				union {
					uint32_t NumElements;
					uint32_t ElementWidth;
				};
			} Buffer;
			struct { uint32_t MostDetailedMip, MipLevels;                             } Texture1D;
			struct { uint32_t MostDetailedMip, MipLevels, FirstArraySlice, ArraySize; } Texture1DArray;
			struct { uint32_t MostDetailedMip, MipLevels;                             } Texture2D;
			struct { uint32_t MostDetailedMip, MipLevels, FirstArraySlice, ArraySize; } Texture2DArray;
			struct { uint32_t UnusedField_NothingToDefine;                            } Texture2DMS;
			struct { uint32_t FirstArraySlice, ArraySize;                             } Texture2DMSArray;
			struct { uint32_t MostDetailedMip, MipLevels;                             } Texture3D;
			struct { uint32_t MostDetailedMip, MipLevels;                             } TextureCube;
			struct { uint32_t MostDetailedMip, MipLevels, First2DArrayFace, NumCubes; } TextureCubeArray;
			struct { uint32_t FirstElement, NumElements, Flags;                       } BufferEx;
		};
	} D3D11_SHADER_RESOURCE_VIEW_DESC;
	
	typedef struct D3D11_RENDER_TARGET_VIEW_DESC {
		DXGI_FORMAT Format;
		D3D11enum ViewDimension;
		union {
			struct {
				union {
					uint32_t FirstElement;
					uint32_t ElementOffset;
				};
				union {
					uint32_t NumElements;
					uint32_t ElementWidth;
				};
			} Buffer;
			struct { uint32_t MipSlice;                             } Texture1D;
			struct { uint32_t MipSlice, FirstArraySlice, ArraySize; } Texture1DArray;
			struct { uint32_t MipSlice;                             } Texture2D;
			struct { uint32_t MipSlice, FirstArraySlice, ArraySize; } Texture2DArray;
			struct { uint32_t UnusedField_NothingToDefine;          } Texture2DMS;
			struct { uint32_t FirstArraySlice, uint32_t ArraySize;  } Texture2DMSArray;
			struct { uint32_t MipSlice, FirstWSlice, WSize;         } Texture3D;
		};
	} D3D11_RENDER_TARGET_VIEW_DESC;
	
	typedef struct D3D11_DEPTH_STENCIL_VIEW_DESC {
		DXGI_FORMAT Format;
		D3D11enum ViewDimension;
		uint32_t Flags;
		union {
			struct { uint32_t MipSlice;                             } Texture1D;
			struct { uint32_t MipSlice, FirstArraySlice, ArraySize; } Texture1DArray;
			struct { uint32_t MipSlice;                             } Texture2D;
			struct { uint32_t MipSlice, FirstArraySlice, ArraySize; } Texture2DArray;
			struct { uint32_t UnusedField_NothingToDefine;          } Texture2DMS;
			struct { uint32_t FirstArraySlice, ArraySize;           } Texture2DMSArray;
		};
	} D3D11_DEPTH_STENCIL_VIEW_DESC;
			
	typedef struct D3D11_UNORDERED_ACCESS_VIEW_DESC {
		DXGI_FORMAT Format;
		D3D11enum ViewDimension;
		union {
			struct { uint32_t FirstElement, NumElements, Flags;     } Buffer;
			struct { uint32_t MipSlice;                             } Texture1D;
			struct { uint32_t MipSlice, FirstArraySlice, ArraySize; } Texture1DArray;
			struct { uint32_t MipSlice;                             } Texture2D;
			struct { uint32_t MipSlice, FirstArraySlice, ArraySize; } Texture2DArray;
			struct { uint32_t MipSlice, FirstWSlice, WSize;         } Texture3D;
		};
	} D3D11_UNORDERED_ACCESS_VIEW_DESC;
	
	typedef struct D3D11_SAMPLER_DESC {
		D3D11enum Filter, AddressU, AddressV, AddressW;
		float MipLODBias;
		uint32_t MaxAnisotropy;
		D3D11enum ComparisonFunc;
		float BorderColor[4];
		float MinLOD, MaxLOD;
	} D3D11_SAMPLER_DESC;
	
	typedef struct D3D11_QUERY_DESC {
		D3D11enum Query;
		uint32_t MiscFlags;
	} D3D11_QUERY_DESC;
	
	typedef struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT {
		uint64_t Frequency;
		bool32 Disjoint;
	} D3D11_QUERY_DATA_TIMESTAMP_DISJOINT;
	
	typedef struct D3D11_QUERY_DATA_PIPELINE_STATISTICS {
		uint64_t IAVertices, IAPrimitives, VSInvocations, GSInvocations, GSPrimitives, CInvocations, CPrimitives;
		uint64_t PSInvocations, HSInvocations, DSInvocations, CSInvocations;
	} D3D11_QUERY_DATA_PIPELINE_STATISTICS;
	
	typedef struct D3D11_QUERY_DATA_SO_STATISTICS {
		uint64_t NumPrimitivesWritten, PrimitivesStorageNeeded;
	} D3D11_QUERY_DATA_SO_STATISTICS;
	
	typedef struct D3D11_COUNTER_DESC {
		D3D11enum Counter;
		uint32_t MiscFlags;
	} D3D11_COUNTER_DESC;

	typedef struct D3D11_COUNTER_INFO {
		D3D11enum LastDeviceDependentCounter;
		uint32_t NumSimultaneousCounters;
		uint8_t NumDetectableParallelUnits;
	} D3D11_COUNTER_INFO;
	
	typedef struct D3D11_CLASS_INSTANCE_DESC {
		uint32_t InstanceId, InstanceIndex, TypeId, ConstantBuffer;
		uint32_t BaseConstantBufferOffset, BaseTexture, BaseSampler;
		bool32 Created;
	} D3D11_CLASS_INSTANCE_DESC;
				
	typedef struct D3D11_FEATURE_DATA_THREADING {
		bool32 DriverConcurrentCreates, DriverCommandLists;
	} D3D11_FEATURE_DATA_THREADING;
	
	typedef struct D3D11_FEATURE_DATA_DOUBLES {
		bool32 DoublePrecisionFloatShaderOps;
	} D3D11_FEATURE_DATA_DOUBLES;
	
	typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT {
		DXGI_FORMAT InFormat;
		uint32_t OutFormatSupport;
	} D3D11_FEATURE_DATA_FORMAT_SUPPORT;
	
	typedef struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2 {
		DXGI_FORMAT InFormat;
		uint32_t OutFormatSupport2;
	} D3D11_FEATURE_DATA_FORMAT_SUPPORT2;
	
	typedef struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
		bool32 ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
	} D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS;
			
]]

com.def {
	{'ID3D11Device', final=true;
		methods = {
			{'CreateBuffer', 'const D3D11_BUFFER_DESC*, const D3D11_SUBRESOURCE_DATA*, ID3D11Buffer** out_buffer'};
			{'CreateTexture1D', 'const D3D11_TEXTURE1D_DESC*, const D3D11_SUBRESOURCE_DATA* initial_data, ID3D11Texture1D** out_texture'};
			{'CreateTexture1D', 'const D3D11_TEXTURE2D_DESC*, const D3D11_SUBRESOURCE_DATA* initial_data, ID3D11Texture2D** out_texture'};
			{'CreateTexture1D', 'const D3D11_TEXTURE3D_DESC*, const D3D11_SUBRESOURCE_DATA* initial_data, ID3D11Texture3D** out_texture'};
			{'CreateShaderResourceView', 'ID3D11Resource*, const D3D11_SHADER_RESOURCE_VIEW_DESC*, ID3D11ShaderResourceView** out_view'};
			{'CreateUnorderedAccessView', 'ID3D11Resource*, const D3D11_UNORDERED_ACCESS_VIEW_DESC*, ID3D11UnorderedAccessView** out_view'};
			{'CreateRenderTargetView', 'ID3D11Resource*, const D3D11_RENDER_TARGET_VIEW_DESC*, ID3D11RenderTargetView** out_view'};
			{'CreateDepthStencilView', 'ID3D11Resource*, const D3D11_DEPTH_STENCIL_VIEW_DESC*, ID3D11DepthStencilView** out_view'};
			{'CreateInputLayout', [[
				const D3D11_INPUT_ELEMENT_DESC descs, uint32_t descs_count, const void* bytecode, size_t bytecode_length, ID3D11InputLayout** out_layout]]};
			{'CreateVertexShader' 'const void* bytecode, size_t length, ID3D11ClassLinkage*, ID3D11VertexShader** out_shader'};
			{'CreateGeometryShader', 'const void* bytecode, size_t length, ID3D11ClassLinkage*, ID3DGeometryShader** out_shader'};
			{'CreateGeometryShaderWithStreamOutput', [[
				const void* bytecode, size_t length,
				const D3D11_SO_DECLARATION_ENTRY* entries, uint32_t num_entries,
				const uint32_t* buffer_strides, uint32_t num_strides,
				uint32_t rasterized_stream, ID3D11ClassLinkage*, ID3D11GeometryShader** out_shader]]};
			{'CreatePixelShader', 'const void* bytecode, size_t length, ID3D11ClassLinkage*, ID3D11PixelShader** out_shader'};
			{'CreateHullShader', 'const void* bytecode, size_t length, ID3D11ClassLinkage*, ID3D11PixelShader** out_shader'};
			{'CreateDomainShader', 'const void* bytecode, size_t length, ID3D11ClassLinkage*, ID3D11DomainShader** out_shader'};
			{'CreateComputeShader', 'const void* bytecode, size_t length, ID3D11ClassLinkage*, ID3D11ComputeShader** out_shader'};
			{'CreateClassLinkage', 'ID3D11ClassLinkage** out_linkage'};
			{'CreateBlendState', 'const D3D11_BLEND_DESC*, ID3D11BlendState** out_blendstate'};
			{'CreateDepthStencilState', 'const D3D11_DEPTH_STENCIL_DESC*, ID3D11DepthStencilState** out_stencilstate'};
			{'CreateRasterizerState', 'const D3D11_RASTERIZER_DESC*, ID3D11RasterizerState** out_rasterizerstate'};
			{'CreateSamplerState', 'const D3D11_SAMPLER_DESC*, ID3D11SamplerState** out_samplerstate'};
			{'CreateQuery', 'const D3D11_QUERY_DESC*, ID3D11Query** out_query'};
			{'CreatePredicate', 'const D3D11_QUERY_DESC*, ID3D11Predicate** out_predicate'};
			{'CreateCounter', 'const D3D11_COUNTER_DESC*, ID3D11Counter** out_counter'};
			{'CreateDeferredContext', 'uint32_t ContextFlags, ID3D11DeviceContext** out_context'};
			{'OpenSharedResource', 'HANDLE, GUID* iid, void** out_resource'};
			{'CheckFormatSupport', 'DXGI_FORMAT Format, uint32_t* out_support'};
			{'CheckMultisampleQualityLevels', 'DXGI_FORMAT Format, uint32_t samplecount, uint32_t* out_numqualitylevels'};
			{'CheckCounterInfo', 'D3D11_COUNTER_INFO* out_info', ret='void'};
			{'CheckCounter', [[
				const D3D11_COUNTER_DESC* desc, D3D11enum* out_type, uint32_t* out_activecounters,
				char* out_name, uint43_t inout_namelength,
				char* out_units, uint32_t inout_unitslength,
				char* out_description, uint32_t inout_descriptionlength]]};
			{'CheckFeatureSupport', 'D3Denum feature, void* out_supportdata, uint32_t supportdata_size'};
			{'GetPrivateData', 'GUID*, uint32_t* inout_datasize, void* out_data'};
			{'SetPrivateData', 'GUID*, uint32_t datasize, const void* data'};
			{'SetPrivateDataInterface', 'GUID*, const IUnknown*'};
			{'GetFeatureLevel', ret='D3D11enum'};
			{'GetCreationFlags', ret='uint32_t'};
			{'GetDeviceRemovedReason'};
			{'GetImmediateContext', 'ID3D11DeviceContext* out_context', ret='void'};
			{'SetExceptionMode', 'uint32_t raiseflags'};
			{'GetExceptionMode', ret='uint32_t'};
		};
		iid = 'db6f6ddb-ac77-4e88-8253819df9bbf140';
	};
	{'ID3D11DeviceChild';
		methods = {
			{'GetDevice', 'ID3D11Device** out_device', ret='void'};
			{'GetPrivateData', 'GUID*, uint32_t* inout_size, void* out_data'};
			{'SetPrivateData', 'GUID*, uint32_t size, void* data'};
			{'SetPrivateDataInterface', 'GUID*, const IUnknown*'};
		};
		iid = '1841e5c8-16b0-489b-bcc844cfb0d5deae';
	};
	{'ID3D11DeviceContext', inherits='ID3D11DeviceChild', final=true;
		methods = {
			{'VSSetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer*const* constantbuffers', ret='void'};
			{'PSSetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView *const *ppShaderResourceViews', ret='void'};
			{'PSSetShader', 'ID3D11PixelShader *pPixelShader, ID3D11ClassInstance *const *ppClassInstances, uint32_t NumClassInstances', ret='void'};
			{'PSSetSamplers', 'uint32_t StartSlot, uint32_t NumSamplers, ID3D11SamplerState *const *ppSamplers', ret='void'};
			{'VSSetShader', 'ID3D11VertexShader *pVertexShader, ID3D11ClassInstance *const *ppClassInstances, uint32_t NumClassInstances', ret='void'};
			{'DrawIndexed', 'uint32_t IndexCount, uint32_t StartIndexLocation, int32_t BaseVertexLocation', ret='void'};
			{'Draw', 'uint32_t vertexcount, uint32_t startvertexlocation', ret='void'};
			{'Map', 'ID3D11Resource *pResource, uint32_t Subresource, D3D11enum MapType, uint32_t MapFlags, D3D11_MAPPED_SUBRESOURCE* out_mapped'};
			{'Unmap', 'ID3D11Resource *pResource, uint32_t Subresource', ret='void'};
			{'PSSetConstantBuffers', 'uint32_t StartSlot, uint32_t NumBuffers, ID3D11Buffer *const *ppConstantBuffers', ret='void'};
			{'IASetInputLayout', 'ID3D11InputLayout*', ret='void'};
			{'IASetVertexBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer*const* vertexbuffers, const uint32_t* strides, const uint32_t* offsets', ret='void'};
			{'IASetIndexBuffer', 'ID3D11Buffer* indexbuffer, DXGI_FORMAT format, uint32_t offset', ret='void'};
			{'DrawIndexedInstanced', [[
				uint32_t indexcountperinstance, uint32_t instancecount, uint32_t startindexlocation, int32_t basevertexlocation, uint32_t startinstancelocation]], ret='void'};
			{'DrawInstanced', 'uint32_t vertexcountperinstance, uint32_t instancecount, uint32_t startvertexlocation, uint32_t startinstancelocation', ret='void'};
			{'GSSetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer*const* buffers', ret='void'};
			{'GSSetShader', 'ID3D11GeometryShader* shader, ID3D11ClassInstance*const* instances, uint32_t numinstances', ret='void'};
			{'IASetPrimitiveTopology', 'D3D11enum topology', ret='void'};
			{'VSSetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView*const* views', ret='void'};
			{'VSSetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D11SamplerState *const *samplers', ret='void'};
			{'Begin', 'ID3D11Asynchronous* async', ret='void'};
			{'End', 'ID3D11Asynchronous* async', ret='void'};
			{'GetData', 'ID3D11Asynchronous* async, void* out_data, uint32_t datasize, uint32_t flags', ret='int32_t'};
			{'SetPredication', 'ID3D11Predicate *predicate, bool32 value', ret='void'};
			{'GSSetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView *const *views', ret='void'};
			{'GSSetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D11SamplerState *const *ppSamplers', ret='void'};
			{'OMSetRenderTargets', 'uint32_t numviews, ID3D11RenderTargetView *const * rtviews, ID3D11DepthStencilView* dsview', ret='void'};
			{'OMSetRenderTargetsAndUnorderedAccessViews', [[
				uint32_t rtvcount, ID3D11RenderTargetView*const* rtvs,
				ID3D11DepthStencilCount* dsv,
				uint32_t uavstartslot, uint32_t uavcount, ID3D11UnorderedAccessView*const* uavs, const uint32_t* uavinitialcounts]], ret=void'};
			{'OMSetBlendState', 'ID3D11BlendState*, const float blendfactor[4], uint32_t samplemask', ret='void'};
			{'OMSetDepthStencilState', 'ID3D11DepthStencilState*, uint32_t stencilref', ret='void'};
			{'SOSetTargets', 'uint32_t numbuffers, ID3D11Buffer*const* targets, const uint32_t* offsets', ret='void'};
			{'DrawAuto', ret='void'};
			{'DrawIndexedInstancedIndirect', 'ID3D11Buffer* bufferforargs, uint32_t alignedbyteoffsetforargs', ret='void'};
			{'DrawInstancedIndirect', 'ID3D11Buffer* bufferforargs, uint32_t alignedbyteoffsetforargs', ret='void'};
			{'Dispatch', 'uint32_t threadgroupcountx, uint32_t threadgroupcounty, uint32_t threadgroupcountz', ret='void'};
			{'DispatchIndirect', 'ID3D11Buffer* bufferforargs, uint32_t alignedbyteoffsetforargs', ret='void'};
			{'RSSetState', 'ID3D11RasterizerState*', ret='void'};
			{'RSSetViewports', 'uint32_t count, const D3D11_VIEWPORT*', ret='void'};
			{'RSSetScissorRects', 'uint32_t count, const RECT*', ret='void'};
			{'CopySubresourceRegion', [[
				ID3D11Resource* dst_resource, uint32_t dst_subresource, uint32_t dst_x, uint32_t dst_y, uint32_t dst_z,
				ID3D11Resource* src_resource, uint32_t src_subresource, const D3D11_BOX* src_box]], ret='void'};
			{'CopyResource', 'ID3D11Resource* dst, ID3D11Resource* src', ret='void'};
			{'UpdateSubresource', [[
				ID3D11Resource* dst_resource, uint32_t dst_subresource, const D3D11_BOX* dst_box,
				const void* src_data, uint32_t src_rowpitch, uint32_t src_depthpitch]], ret='void'};
			{'CopyStructureCount', 'ID3D11Buffer* dst_buffer, uint32_t dst_alignedbyteoffset, ID3D11UnorderedAccessView src_uav', ret='void'};
			{'ClearRenderTargetView', 'ID3D11RenderTargetView*, const float rgba[4]', ret='void'};
			{'ClearUnorderedAccessViewUint', 'ID3D11UnorderedAccessView*, const uint32_t values[4]', ret='void'};
			{'ClearUnorderedAccessViewFloat', 'ID3D11UnorderedAccessView*, const float values[4]', ret='void'};
			{'ClearDepthStencilView', 'ID3D11DepthStencilView*, uint32_t flags, float depth, uint8_t stencil', ret='void'};
			{'GenerateMips', 'ID3D11ShaderResourceView*', ret='void'};
			{'SetResourceMinLOD', 'ID3D11Resource*, float', ret='void'};
			{'GetResourceMinLOD', 'ID3D11Resource*', ret='float'};
			{'ResolveSubresource', [[
				ID3D11Resource* dst_resource, uint32_t dst_subresource, ID3D11Resource* src_resource, uint32_t src_subresource, DXGI_FORMAT format]], ret='void'};
			{'ExecuteCommandList', 'ID3D11CommandList*, bool32 restorecontextstate', ret='void'};
			{'HSSetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView *const * views', ret='void'};
			{'HSSetShader', 'ID3D11HullShader*, ID3D11Instance*const* instances, uint32_t num_instances', ret='void'};
			{'HSSetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D1SamplerState*const* samplers', ret='void'};
			{'HSSetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D1Buffer*const* constant_buffers', ret='void'};
			{'DSSetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView*const* views', ret='void'};
			{'DSSetShader', 'ID3D11DomainShader*, ID3D11ClassInstance*const* instances, uint32_t num_instances', ret='void'};
			{'DSSetSamplers', 'uint32_t startslot, uint32_t num_samplers, ID3D11SamplerState*const* samplers', ret='void'};
			{'DSSetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer*const* buffers', ret='void'};
			{'CSSetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView*const* views', ret='void'};
			{'CSSetUnorderedAccessViews', 'uint32_t startslot, uint32_t num_auvs, ID3D11UnorderedAccessView*const* uavs, const uint32_t* initial_counts', ret='void'};
			{'CSSetShader', 'ID3D11ComputeShader*, ID3D11ClassInstance*const* instances, uint32_t num_instances', ret='void'};
			{'CSSetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D11SamplerState*const* samplers', ret='void'};
			{'CSSetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer*const* buffers', ret='void'};
			{'VSGetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer** out_buffers', ret='void'};
			{'PSGetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView** out_views', ret='void'};
			{'PSGetShader', 'ID3D11PixelShader** out_shader, ID3D11ClassInstance** out_instances, uint32_t inout_instancecount', ret='void'};
			{'PSGetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D11SamplerState** out_samplers', ret='void'};
			{'VSGetShader', 'ID3D11VertexShader** out_shader, ID3D11ClassInstance** out_instances, uint32_t inout_instancecount', ret='void'};
			{'PSGetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer** out_buffers', ret='void'};
			{'IAGetInputLayout', 'ID3D11InputLayout** out_layout', ret='void'};
			{'IAGetVertexBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer** out_buffers, uint32_t* out_strides, uint32_t out_offsets', ret='void'};
			{'IAGetIndexBuffer', 'ID3D11Buffer** out_buffer, DXGI_FORMAT* out_format, uint32_t out_offset', ret='void'};
			{'GSGetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer** out_buffers', ret='void'};
			{'GSGetShader', 'ID3D11GeometryShader** out_shader, ID3D11ClassInstance** out_instances, uint32_t* out_numinstances', ret='void'};
			{'IAGetPrimitiveTopology', 'D3D11enum* out_topology', ret='void'};
			{'VSGetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView** out_views', ret='void'};
			{'VSGetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D11SamplerState** out_samplers', ret='void'};
			{'GetPredication', 'ID3D11Predicate** out_predicate, bool32* out_value', ret='void'};
			{'GSGetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView* out_views', ret='void'};
			{'GSGetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D11SamplerState** out_samplers', ret='void'};
			{'OMGetRenderTargets', 'uint32_t numviews, ID3D11RenderTargetView** out_rtviews, ID3D11DepthStencilView** out_dsviews', ret='void'};
			{'OMGetRenderTargetsAndUnorderedAccessViews', [[
				uint32_t num_rtviews, ID3D11RenderTargetView** out_rtviews, ID3D11DepthStencilView** out_dsview,
				uint32_t uaview_startslot, uint32_t uaview_count, ID3D11UnorderedAccessView** out_uaviews]], ret='void'};
			{'OMGetBlendState', 'ID3D11BlendState** out_state, float out_factor[4], uint32_t* out_samplemask', ret='void'};
			{'OMGetDepthStencilState', 'ID3D11DepthStencilState** out_state, uint32_t out_stencilref', ret='void'};
			{'SOGetTargets', 'uint32_t numbuffers, ID3D11Buffer** out_targets', ret='void'};
			{'RSGetState', 'ID3D11RasterizerState** out_state', ret='void'};
			{'RSGetViewports', 'uint32_t* inout_count, D3D11_VIEWPORT* out_viewports', ret='void'};
			{'RSGetScissorRects', 'uint32_t* inout_count, RECT* out_rects', ret='void'};
			{'HSGetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView** out_views', ret='void'};
			{'HSGetShader', 'ID3D11HullShader** out_shader, ID3D11ClassInstance** out_instances, uint32_t* inout_count', ret='void'};
			{'HSGetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D11SamplerState** out_samplers', ret='void'};
			{'HSGetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer** out_buffers', ret='void'};
			{'DSGetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView** out_views', ret='void'};
			{'DSGetShader', 'ID3D11DomainShader** out_shader, ID3D11ClassInstance** out_instances, uint32_t* inout_numinstances', ret='void'};
			{'DSGetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D11SamplerState** out_samplers', ret='void'};
			{'DSGetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer** out_buffers', ret='void'};
			{'CSGetShaderResources', 'uint32_t startslot, uint32_t numviews, ID3D11ShaderResourceView** out_views', ret='void'};
			{'CSGetUnorderedAccessViews', 'uint32_t startslot, uint32_t uav_count, ID3D11UnorderedAccessView** out_uavs', ret='void'};
			{'CSGetShader', 'ID3D11ComputeShader** out_shader, ID3D11ClassInstance** out_instances, uint32_t* inout_numinstances', ret='void'};
			{'CSGetSamplers', 'uint32_t startslot, uint32_t numsamplers, ID3D11SamplerState** out_samplers', ret='void'};
			{'CSGetConstantBuffers', 'uint32_t startslot, uint32_t numbuffers, ID3D11Buffer** out_buffers', ret='void'};
			{'ClearState', ret='void'};
			{'Flush', ret='void'};
			{'GetType', ret='D3D11enum'};
			{'GetContextFlags', ret='uint32_t'};
			{'FinishCommandList', 'bool32 restoredeferredcontextstate, ID3DCommandList** out_commandlist', ret='int32_t'};
		};
		iid = 'c0bfa96c-e089-44fb-8eaf26f8796190da';
	};
	{'ID3D11DepthStencilState', inherits='ID3D11DeviceChild', final=true;
		methods = {
			{'GetDesc', 'D3D11_DEPTH_STENCIL_DESC* out_desc', ret='void'};
		};
		iid = '03823efb-8d8f-4e1c-9aa2f64bb2cbfdf1';
	};
	{'ID3D11BlendState', inherits='ID3D11DeviceChild', final=true;
		methods = {
			{'GetDesc', 'D3D11_BLEND_DESC* out_desc', ret='void'};
		};
		iid = '75b68faa-347d-4159-8f45a0640f01cd9a';
	};
	{'ID3D11RasterizerState', inherits='ID3D11DeviceChild', final=true;
		methods = {
			{'GetDesc', 'D3D11_RASTERIZER_DESC* out_desc', ret='void'};
		};
		iid = '9bb4ab81-ab1a-4d8f-b506fc04200b6ee7';
	};
	{'ID3D11Resource';
		methods = {
			{'GetType', 'D3D11enum* out_type', ret='void'};
			{'SetEvictionPriority', 'uint32_t priority', ret='void'};
			{'GetEvictionPriority', ret='uint32_t'};
		};
		iid = 'dc8e63f3-d12b-4952-b47b5e45026a862d';
	};
	{'ID3D11Buffer', inherits='ID3D11Resource', final=true;
		methods = {
			{'GetDesc', 'D3D11_BUFFER_DESC* out_desc', ret='void'};
		};
		iid = '48570b85-d1ee-4fcd-a250eb350722b037';
	};
	{'ID3D11Texture1D', inherits='ID3D11Resource', final=true;
		methods = {
			{'GetDesc', 'D3D11_TEXTURE1D_DESC* out_desc', ret='void'};
		};
		iid = 'f8fb5c27-c6b3-4f75-a4c8439af2ef564c';
	};
	{'ID3D11Texture2D', inherits='ID3D11Resource', final=true;
		methods = {
			{'GetDesc', 'D3D11_TEXTURE2D_DESC* out_desc', ret='void'};
		};
		iid = '6f15aaf2-d208-4e89-9ab4489535d34f9c';
	};
	{'ID3D11Texture3D', inherits='ID3D11Resource', final=true;
		methods = {
			{'GetDesc', 'D3D11_TEXTURE3D_DESC* out_desc', ret='void'};
		};
		iid = '037e866e-f56d-4357-a8af9dabbe6e250e';
	};
	{'ID3D11View', inherits='ID3D11DeviceChild';
		methods = {
			{'GetResource', 'ID3D11Resource** out_resource', ret='void'};
		};
		iid = '839d1216-bb2e-412b-b7f4a9dbebe08ed1';
	};
	{'ID3D11ShaderResourceView', inherits='ID3D11View', final=true;
		methods = {
			{'GetDesc', 'D3D11_SHADER_RESOURCE_VIEW_DESC* out_desc', ret='void'};
		};
		iid = 'b0e06fe0-8192-4e1a-b1ca36d7414710b2';
	};
	{'ID3D11RenderTargetView', inherits='ID3D11View', final=true;
		methods = {
			{'GetDesc', 'D3D11_RENDER_TARGET_VIEW_DESC* out_desc', ret='void'};
		};
		iid = 'dfdba067-0b8d-4865-875bd7b4516cc164';
	};
	{'ID3D11DepthStencilView', inherits='ID3D11View', final=true;
		methods = {
			{'GetDesc', 'D3D11_DEPTH_STENCIL_VIEW_DESC* out_desc', ret='void'};
		};
		iid = '9fdac92a-1876-48c3-afad25b94f84a9b6';
	};
	{'ID3D11UnorderedAccessView', inherits='ID3D11View', final=true;
		methods = {
			{'GetDesc', 'D3D11_UNORDERED_ACCESS_VIEW_DESC* out_desc', ret='void'};
		};
		iid = '28acf509-7f5c-48f6-8611f316010a6380';
	};
	{'ID3D11VertexShader', inherits='ID3D11DeviceChild', final=true;
		methods = { };
		iid = '3b301d64-d678-4289-889722f8928b72f3';
	};
	{'ID3D11HullShader', inherits='ID3D11DeviceChild', final=true;
		methods = { };
		iid = '8e5c6061-628a-4c8e-8264bbe45cb3d5dd';
	};
	{'ID3D11DomainShader', inherits='ID3D11DeviceChild', final=true;
		methods = { };
		iid = 'f582c508-0f36-490c-997731eece268cfa';
	};
	{'ID3D11GeometryShader', inherits='ID3D11DeviceChild', final=true;
		methods = { };
		iid = '38325b96-effb-4022-ba022e795b70275c';
	};
	{'ID3D11PixelShader', inherits='ID3D11DeviceChild', final=true;
		methods = { };
		iid = 'ea82e40d-51dc-4f33-93d4db7c9125ae8c';
	};
	{'ID3D11ComputeShader', inherits='ID3D11DeviceChild', final=true;
		methods = { };
		iid = '4f5b196e-c2bd-495e-bd011fded38e4969';
	};
	{'ID3D11InputLayout', inherits='ID3D11DeviceChild', final=true;
		methods = { };
		iid = 'e4819ddc-4cf0-4025-bd265de82a3e07b7';
	};
	{'ID3D11SamplerState', inherits='ID3D11DeviceChild', final=true;
		methods = {
			{'GetDesc', 'D3D11_SAMPLER_DESC* out_desc', ret='void'};
		};
		iid = 'da6fea51-564c-4487-9810f0d0f9b4e3a5';
	};
	{'ID3D11Asynchronous', inherits='ID3D11DeviceChild';
		methods = {
			{'GetDataSize', ret='uint32_t'};
		};
		iid = '4b35d0cd-1e15-4258-9c981b1333f6dd3b';
	};
	{'ID3D11Query', inherits='ID3D11Asynchronous';
		methods = {
			{'GetDesc', 'D3D11_QUERY_DESC* out_desc', ret='void'};
		};
		iid = 'd6c00747-87b7-425e-b84d44d108560afd';
	};
	{'ID3D11Predicate', inherits='ID3D11Query', final=true;
		methods = { };
		iid = '9eb576dd-9f77-4d86-81aa8bab5fe490e2';
	};
	{'ID3D11Counter', inherits='ID3D11Asynchronous', final=true;
		methods = {
			{'GetDesc', 'D3D11_COUNTER_DESC* out_desc', ret='void'};
		};
		iid = '6e8c49fb-a371-4770-b44029086022b741';
	};
	{'ID3D11ClassInstance', inherits='ID3D11DeviceChild', final=true;
		methods = {
			{'GetClassLinkage', 'ID3D11ClassLinkage** out_linkage', ret='void'};
			{'GetDesc', 'D3D11_CLASS_INSTANCE_DESC* out_desc', ret='void'};
			{'GetInstanceName', 'char* out_buffer, size_t inout_length', ret='void'};
			{'GetTypeName', 'char* out_buffer, size_t inout_length', ret='void'};
		};
		iid = 'a6cd7faa-b0b7-4a2f-94368662a65797cb';
	};
	{'ID3D11ClassLinkage', inherits='ID3D11DeviceChild', final=true;
		methods = {
			{'GetClassInstance', 'char* name, uint32_t index, ID3D11ClassInstance** out_instance'};
			{'CreateClassInstance', [[
				char* name, uint32_t constantbufferoffset, uint32_t constantvectoroffset, uint32_t textureoffset, uint32_t sampleroffset, ID3D11ClassInstance** out_instance]]};
		};
		iid = 'ddf57cba-9543-46e4-a12bf207a0fe7fed';
	};
	{'ID3D11CommandList', inherits='ID3D11DeviceChild', final=true;
		methods = {
			{'GetContextFlags', ret='uint32_t'};
		};
		iid = 'a24bc4d1-769e-43f7-801398ff566c18e2';
	};
};

ffi.cdef [[

	int32_t D3D11CreateDevice(
			IDXGIAdapter* ddapter,
			D3D_DRIVER_TYPE,
			HMODULE software,
			uint32_t flags,
			const D3D11enum* featurelevels,
			uint32_t numfeaturelevels,
			uint32_t sdkversion,
			ID3D11Device** out_device,
			D3D11enum* out_featurelevel,
			ID3D11DeviceContext** out_immediatecontext);
	
	int32_t D3D11CreateDeviceAndSwapChain(
			IDXGIAdapter* adapter,
			D3D_DRIVER_TYPE,
			HMODULE software,
			uint32_t flags,
			const D3D11enum* featurelevels,
			uint32_t numfeaturelevels,
			uint32_t sdkversion,
			const DXGI_SWAP_CHAIN_DESC*,
			IDXGISwapChain** out_swapchain,
			ID3D11Device** out_device,
			D3D11enum* out_featurelevel,
			ID3D11DeviceContext** out_immediatecontext);
	
]]

return ffi.load 'd3d11'
